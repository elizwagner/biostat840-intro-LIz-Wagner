"0",""
"0","#Using the `b_lyrics` dataset,"
"0",""
"0","#Tokenize each lyrical line by words."
"0","#Remove the ""stopwords""."
"0","#Calculate the total number for each word in the lyrics."
"0","#Using the ""bing"" sentiment lexicon, add a column to the summarized data frame adding the ""bing"" sentiment lexicon."
"0","#Sort the rows from most frequent to least frequent words."
"0","#Only keep the top 25 most frequent words."
"0","#Auto print the wrangled tibble data frame."
"0","#Use `ggplot2` to create a bar plot with the top words on the y-axis and the frequency of each word on the x-axis. Color each bar by the sentiment of each word from the ""bing"" sentiment lexicon. Bars should be ordered from most frequent on the top to least frequent on the bottom of the plot."
"0","#Create a word cloud of the top 25 most frequent words."
"0",""
"0","b_lyrics_df2 = tibble(text = b_lyrics$line) "
"0",""
"0","b_lyrics_df2n <- b_lyrics_df2 %>% "
"0"," unnest_tokens(output = word, "
"0","                input = text, "
"0","                token=""words"") %>% "
"0","    anti_join(stop_words)%>%"
"0","    count(word, sort = TRUE) "
"2","Joining, by = ""word"""
"0","b_lyrics_df2n"
